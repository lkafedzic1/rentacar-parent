openapi: 3.0.0
info:
  description: "This documentation list all the available endpoints on the application server"
  version: "1.1"
  title: "User Api"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
  - name: "docs"
    description: "Everything about documentation"
    externalDocs:
      description: "Find out more"
      url: "http://example.com"
  - name: "users"
    description: "Everything about users documentation"
    externalDocs:
      description: "Find out more"
      url: "http://example.com"

paths:
  "/docs":
    get:
      tags:
        - docs
      summary: exposes documentation for all the available operations
      operationId: loadDocs
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: string
                example: "display docs here"
  "/users":
    get:
      tags:
        - users
      summary: retrieves all user entity
      description: returns all user entitys
      operationId: getAllUsers
      security:
        - BasicAuth: []
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: not authorized
    post:
      tags:
        - users
      summary: creates a user entity
      description: returns the user entity that was just created
      operationId: createUser
      security:
        - BasicAuth: []
      parameters:
        - name: Authorization
          schema:
            type: string
          in: header
          example: Basic ZGVtbzpwQDU1dzByZA==
      requestBody:
        description: user object that needs to be added to storage
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "304":
          description: user not added
        "401":
          description: not authorized
        "422":
          description: unprocessable Entity missing

  "/users/exist":
    get:
      tags:
        - users
      summary: query to get a user by the userId
      description: return a user that matches the userId provided
      operationId: isUser
      parameters:
        - name: username
          in: query
          description: the username to match
          required: true
          schema:
            type: string
            example: jeffdropsit@gmail.com
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                example:
                  {}
        "404":
          description: not found
  "/users/{userId}":
    get:
      tags:
        - users
      summary: query to get a user by the userId
      description: return a user that matches the userId provided
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: the userId to match
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: not authorized
        "404":
          description: not found
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - users
      summary: endpoint exposing funcitionality to update a user's details
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: the userId to match
          required: true
          schema:
            type: integer
            format: int64
            example: 123456456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: User object that needs to be added to storage
        required: true
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "304":
          description: user not updated
        "401":
          description: not authorized
        "404":
          description: user cannot be found
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - users
      summary: endpoint exposing funcitionality to delete a user from the database
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: the userId to match
          required: true
          schema:
            type: integer
            format: int64
            example: 123456456
      responses:
        "204":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "304":
          description: user not updated
        "401":
          description: not authorized
        "404":
          description: user cannot be found
      security:
        - ApiKeyAuth: []
  "/users/login":
    get:
      tags:
        - users
      summary: login to get a user by the email and password
      description: return a user that matches the login details provided
      operationId: login
      parameters:
        - name: Authorization
          required: true
          schema:
            type: string
          in: header
          example: Basic ZGVtbzpwQDU1dzByZA==
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: not authorized
        "404":
          description: invalid email or password

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        firstName:
          type: string
          example: Sithembiso
        lastName:
          type: string
          example: Ndlovu
        email:
          type: string
          example: email
        role:
          type: object
          properties:
            name:
              type: string
        address:
          type: object
          properties:
            street:
              type: string
            country:
              type: string
            city:
              type: string
        phone:
          type: string
          example: 9901030292080



